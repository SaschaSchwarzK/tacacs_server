name: Quality Checks (Lint • Tests • Advanced Tests • CodeQL)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: "0 3 * * 1"  # weekly Monday 03:00 UTC (for CodeQL / deep scans)
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      cache-hit: ${{ steps.setup.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python and Poetry
        id: setup
        uses: ./.github/actions/setup-python-poetry

  quality:
    name: Lint (Ruff • Mypy • Bandit)
    runs-on: ubuntu-latest
    needs: [setup]
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-python-poetry

      - name: Ruff (lint)
        run: |
          poetry run ruff check .

      - name: Ruff (format check)
        run: |
          poetry run ruff format --check .

      - name: Mypy (type check)
        run: |
          echo "Running mypy file by file to reduce output noise..."
          find tacacs_server -name "*.py" -type f | while read -r file; do
            echo "Checking $file..."
            poetry run mypy "$file" || echo "Issues found in $file"
          done

      - name: Bandit (security lint)
        run: |
          poetry run bandit -r . -x tests,.venv

      - name: Semgrep (CI rules)
        uses: semgrep/semgrep-action@v1
        with:
          config: "p/ci"

  tests:
    name: Tests • Coverage
    runs-on: ubuntu-latest
    needs: [setup, quality]
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-python-poetry

      - name: Pytest (XML & coverage)
        run: |
          poetry run pytest -q \
            --junitxml=test-results/junit.xml \
            --cov=. --cov-report=xml:coverage.xml --cov-report=term-missing \
            --cov-fail-under=0

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-artifacts
          path: |
            test-results/junit.xml
            coverage.xml
          exclude: |
            **/*.env
            **/*.key
            **/*.pem
            **/*secret*
            **/*password*
            **/*token*
            **/*credential*

  chaos-tests:
    name: Chaos Engineering Tests
    runs-on: ubuntu-latest
    needs: [setup, tests]
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-python-poetry

      - name: Run Chaos Tests
        run: |
          poetry run python scripts/run_advanced_tests.py --test-type chaos

  security-tests:
    name: Security Penetration Tests
    runs-on: ubuntu-latest
    needs: [setup, tests]
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-python-poetry

      - name: Run Security Tests
        run: |
          poetry run python scripts/run_advanced_tests.py --test-type security

  contract-tests:
    name: API Contract Tests
    runs-on: ubuntu-latest
    needs: [setup, tests]
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-python-poetry

      - name: Run Contract Tests
        run: |
          poetry run python scripts/run_advanced_tests.py --test-type contract

  e2e-tests:
    name: End-to-End Integration Tests
    runs-on: ubuntu-latest
    needs: [setup, tests]
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-python-poetry

      - name: Run E2E Tests
        run: |
          poetry run python scripts/run_advanced_tests.py --test-type e2e

      - name: Upload advanced test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: advanced-test-artifacts
          path: |
            test-results/
            logs/
          exclude: |
            **/*.env
            **/*.key
            **/*.pem
            **/*secret*
            **/*password*
            **/*token*
            **/*credential*

  advanced-tests-summary:
    name: Advanced Tests Summary
    runs-on: ubuntu-latest
    needs: [chaos-tests, security-tests, contract-tests, e2e-tests]
    if: always()
    steps:
      - name: Check Advanced Tests Results
        run: |
          echo "Advanced Tests Summary:"
          echo "- Chaos Tests: ${{ needs.chaos-tests.result }}"
          echo "- Security Tests: ${{ needs.security-tests.result }}"
          echo "- Contract Tests: ${{ needs.contract-tests.result }}"
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}"
          
          if [[ "${{ needs.chaos-tests.result }}" == "success" && \
                "${{ needs.security-tests.result }}" == "success" && \
                "${{ needs.contract-tests.result }}" == "success" && \
                "${{ needs.e2e-tests.result }}" == "success" ]]; then
            echo "✅ All advanced tests passed!"
          else
            echo "⚠️ Some advanced tests failed or were skipped"
            exit 1
          fi

  codeql:
    name: CodeQL (Python)
    runs-on: ubuntu-latest
    needs: [setup]
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
      - uses: ./.github/actions/setup-python-poetry

      - name: Analyze
        uses: github/codeql-action/analyze@v3