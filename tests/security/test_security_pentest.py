"""
Security Penetration Testing Suite for TACACS+ Server

Automated security testing covering OWASP Top 10 and AAA-specific vulnerabilities.

Installation:
    pip install pytest requests pyjwt cryptography sqlalchemy

Usage:
    pytest tests/security/test_security_pentest.py -v --html=security_report.html
"""

import base64
import random
import socket
import struct
import time
from urllib.parse import quote

import pytest
import requests

# ============================================================================
# Security Test Configuration
# ============================================================================


class SecurityConfig:
    """Security test configuration"""

    BASE_URL = "http://localhost:8080"
    TACACS_HOST = "localhost"
    TACACS_PORT = 49
    RADIUS_HOST = "localhost"
    RADIUS_PORT = 1812

    # Test credentials
    ADMIN_USER = "admin"
    ADMIN_PASS = "admin123"
    TEST_USER = "testuser"
    TEST_PASS = "testpass123"


# ============================================================================
# Security Test Base Class
# ============================================================================


class SecurityTestBase:
    """Base class for security tests"""

    @pytest.fixture(autouse=True)
    def setup_server(self, tacacs_server):
        """Use server fixture"""
        self.server_info = tacacs_server


# ============================================================================
# OWASP Top 10 Security Tests
# ============================================================================


class TestInjectionVulnerabilities(SecurityTestBase):
    """A01:2021 - Injection vulnerabilities"""

    @pytest.mark.security
    def test_sql_injection_login(self):
        """Test SQL injection in login endpoint"""
        sql_payloads = [
            "' OR '1'='1",
            "' OR '1'='1' --",
            "' OR '1'='1' /*",
            "admin'--",
            "' UNION SELECT NULL--",
            "1' AND '1'='1",
            "'; DROP TABLE users; --",
            "1' ORDER BY 1--",
            "' OR 1=1#",
        ]

        for payload in sql_payloads:
            response = requests.post(
                f"{SecurityConfig.BASE_URL}/api/admin/login",
                json={"username": payload, "password": payload},
                timeout=5,
            )

            # Should not allow login with SQL injection
            assert response.status_code != 200, (
                f"SQL injection succeeded with: {payload}"
            )
            # Accept 404 as endpoint may not exist in test environment
            assert response.status_code in [400, 401, 403, 404]

    @pytest.mark.security
    def test_sql_injection_search(self):
        """Test SQL injection in search endpoints"""
        sql_payloads = [
            "' OR '1'='1",
            "1' UNION SELECT * FROM users--",
            "1'; UPDATE users SET password='hacked'--",
        ]

        for payload in sql_payloads:
            response = requests.get(
                f"{SecurityConfig.BASE_URL}/api/users",
                params={"search": payload},
                timeout=5,
            )

            # Should sanitize input, not execute SQL
            assert response.status_code in [200, 400, 404], "Unexpected response"
            if response.status_code == 200:
                # Verify no unauthorized data exposure
                data = response.json()
                assert isinstance(data, (dict, list)), "Invalid response format"

    @pytest.mark.security
    def test_ldap_injection(self):
        """Test LDAP injection attacks"""
        ldap_payloads = [
            "*",
            "*)(&",
            "*)(uid=*",
            "admin*",
            "*)(objectClass=*",
        ]

        for payload in ldap_payloads:
            response = requests.post(
                f"{SecurityConfig.BASE_URL}/api/test-auth",
                json={"username": payload, "password": "test"},
                timeout=5,
            )

            # Should not allow LDAP filter bypass
            assert response.status_code in [401, 400, 404], (
                f"LDAP injection may work: {payload}"
            )

    @pytest.mark.security
    def test_command_injection(self):
        """Test OS command injection"""
        command_payloads = [
            "; ls",
            "| cat /etc/passwd",
            "& ping -c 1 evil.com",
            "`whoami`",
            "$(whoami)",
        ]

        for payload in command_payloads:
            response = requests.post(
                f"{SecurityConfig.BASE_URL}/api/devices",
                json={"name": payload, "ip_address": "10.0.0.1", "device_group_id": 1},
                timeout=5,
            )

            # Should sanitize input
            assert response.status_code in [201, 400, 401, 403, 404]


class TestBrokenAuthentication(SecurityTestBase):
    """A02:2021 - Broken Authentication"""

    @pytest.mark.security
    def test_brute_force_protection(self):
        """Test brute force attack protection"""
        username = "admin"
        failed_attempts = 0

        # Attempt multiple failed logins
        for i in range(20):
            response = requests.post(
                f"{SecurityConfig.BASE_URL}/api/admin/login",
                json={"username": username, "password": f"wrong{i}"},
                timeout=5,
            )

            if response.status_code == 401:
                failed_attempts += 1
            elif response.status_code == 429:  # Rate limited
                print(f"✅ Rate limiting activated after {failed_attempts} attempts")
                return

            time.sleep(0.1)

        # Should be rate limited before 20 attempts
        assert failed_attempts < 20, "No brute force protection detected"

    @pytest.mark.security
    def test_weak_password_acceptance(self):
        """Test if weak passwords are accepted"""
        weak_passwords = [
            "123456",
            "password",
            "abc123",
            "qwerty",
            "admin",
            "test",
        ]

        for weak_pass in weak_passwords:
            response = requests.post(
                f"{SecurityConfig.BASE_URL}/api/users",
                json={
                    "username": f"testuser_{random.randint(1000, 9999)}",
                    "password": weak_pass,
                    "email": "test@example.com",
                },
                timeout=5,
            )

            # Should reject weak passwords
            if response.status_code == 201:
                pytest.fail(f"Weak password accepted: {weak_pass}")

    @pytest.mark.security
    def test_session_fixation(self):
        """Test session fixation vulnerability"""
        # Try to set session ID
        custom_session = "fixed_session_12345"

        response = requests.post(
            f"{SecurityConfig.BASE_URL}/api/admin/login",
            json={
                "username": SecurityConfig.ADMIN_USER,
                "password": SecurityConfig.ADMIN_PASS,
            },
            cookies={"session_id": custom_session},
            timeout=5,
        )

        if response.status_code == 200:
            # Session ID should be regenerated
            new_session = response.cookies.get("session_id")
            assert new_session != custom_session, "Session fixation vulnerability!"

    @pytest.mark.security
    def test_session_timeout(self):
        """Test session timeout enforcement"""
        # Login
        response = requests.post(
            f"{SecurityConfig.BASE_URL}/api/admin/login",
            json={
                "username": SecurityConfig.ADMIN_USER,
                "password": SecurityConfig.ADMIN_PASS,
            },
            timeout=5,
        )

        if response.status_code == 200:
            session_cookie = response.cookies.get("session_id")

            # Simulate long idle time
            time.sleep(2)  # Would be longer in production

            # Try to use old session
            response = requests.get(
                f"{SecurityConfig.BASE_URL}/api/users",
                cookies={"session_id": session_cookie},
                timeout=5,
            )

            # Session should still be valid for reasonable time
            assert response.status_code in [200, 401]

    @pytest.mark.security
    def test_password_reset_token_security(self):
        """Test password reset token generation"""
        # Request password reset multiple times
        tokens = []
        for _ in range(5):
            response = requests.post(
                f"{SecurityConfig.BASE_URL}/api/users/reset-password",
                json={"email": "test@example.com"},
                timeout=5,
            )

            if response.status_code == 200:
                token = response.json().get("reset_token")
                if token:
                    tokens.append(token)

        # Tokens should be unique and unpredictable
        assert len(tokens) == len(set(tokens)), "Reset tokens are not unique"


class TestSensitiveDataExposure(SecurityTestBase):
    """A03:2021 - Sensitive Data Exposure"""

    @pytest.mark.security
    def test_password_in_response(self):
        """Verify passwords not returned in responses"""
        response = requests.get(f"{SecurityConfig.BASE_URL}/api/users", timeout=5)

        if response.status_code == 200:
            users = response.json()
            if isinstance(users, list):
                for user in users:
                    assert "password" not in user, "Password exposed in response!"
                    assert "password_hash" not in user, "Password hash exposed!"

    @pytest.mark.security
    def test_secrets_in_device_response(self):
        """Verify secrets not exposed in device API"""
        response = requests.get(f"{SecurityConfig.BASE_URL}/api/devices", timeout=5)

        if response.status_code == 200:
            devices = response.json()
            if isinstance(devices, list):
                for device in devices:
                    assert "secret" not in device, "TACACS+ secret exposed!"
                    assert "radius_secret" not in device, "RADIUS secret exposed!"

    @pytest.mark.security
    def test_error_message_information_disclosure(self):
        """Test for information disclosure in error messages"""
        response = requests.post(
            f"{SecurityConfig.BASE_URL}/api/admin/login",
            json={"username": "nonexistent", "password": "wrong"},
            timeout=5,
        )

        if response.status_code == 401:
            error_msg = response.json().get("error", "").lower()

            # Should not reveal if user exists
            assert "user not found" not in error_msg, "User enumeration possible"
            assert "invalid username" not in error_msg, "User enumeration possible"
            assert "user does not exist" not in error_msg, "User enumeration possible"

    @pytest.mark.security
    def test_stack_trace_exposure(self):
        """Verify stack traces not exposed"""
        # Send malformed request
        response = requests.post(
            f"{SecurityConfig.BASE_URL}/api/devices",
            json={"invalid": "data"},
            timeout=5,
        )

        if response.status_code >= 400:
            error_text = response.text.lower()

            # Should not contain stack traces
            assert "traceback" not in error_text, "Stack trace exposed!"
            assert 'file "' not in error_text, "File paths exposed!"
            assert '.py",' not in error_text, "Stack trace exposed!"


class TestXXE(SecurityTestBase):
    """A04:2021 - XML External Entities (XXE)"""

    @pytest.mark.security
    def test_xxe_attack(self):
        """Test XXE vulnerability if XML parsing exists"""
        xxe_payload = """<?xml version="1.0"?>
        <!DOCTYPE foo [
        <!ENTITY xxe SYSTEM "file:///etc/passwd">
        ]>
        <user><username>&xxe;</username></user>
        """

        response = requests.post(
            f"{SecurityConfig.BASE_URL}/api/import",
            data=xxe_payload,
            headers={"Content-Type": "application/xml"},
            timeout=5,
        )

        # Should reject or safely handle XML
        if response.status_code == 200:
            assert "/etc/passwd" not in response.text, "XXE vulnerability!"


class TestBrokenAccessControl(SecurityTestBase):
    """A05:2021 - Broken Access Control"""

    @pytest.mark.security
    def test_idor_vulnerability(self):
        """Test Insecure Direct Object Reference"""
        # Try to access other user's data
        user_ids = [1, 2, 3, 100, 999]

        for user_id in user_ids:
            response = requests.get(
                f"{SecurityConfig.BASE_URL}/api/users/{user_id}", timeout=5
            )

            # Should require authentication
            assert response.status_code in [401, 403, 404], (
                f"Unauthorized access to user {user_id}"
            )

    @pytest.mark.security
    def test_privilege_escalation(self):
        """Test horizontal privilege escalation"""
        # Login as regular user (if endpoint exists)
        response = requests.post(
            f"{SecurityConfig.BASE_URL}/api/admin/login",
            json={
                "username": SecurityConfig.TEST_USER,
                "password": SecurityConfig.TEST_PASS,
            },
            timeout=5,
        )

        if response.status_code == 200:
            session = response.cookies

            # Try to access admin endpoint
            admin_response = requests.get(
                f"{SecurityConfig.BASE_URL}/api/admin/users", cookies=session, timeout=5
            )

            # Should be denied
            assert admin_response.status_code in [401, 403], (
                "Privilege escalation possible!"
            )

    @pytest.mark.security
    def test_path_traversal(self):
        """Test directory traversal vulnerability"""
        payloads = [
            "../../../etc/passwd",
            "..\\..\\..\\windows\\system32\\config\\sam",
            "....//....//....//etc/passwd",
            "..%2F..%2F..%2Fetc%2Fpasswd",
        ]

        for payload in payloads:
            response = requests.get(
                f"{SecurityConfig.BASE_URL}/api/files/{quote(payload)}", timeout=5
            )

            # Should not allow path traversal
            if response.status_code == 200:
                assert "/etc/passwd" not in response.text, (
                    "Path traversal vulnerability!"
                )

    @pytest.mark.security
    def test_forced_browsing(self):
        """Test access to administrative functions without auth"""
        admin_endpoints = [
            "/api/admin/users",
            "/api/admin/config",
            "/api/admin/logs",
            "/api/admin/backup",
            "/api/admin/reset-stats",
        ]

        for endpoint in admin_endpoints:
            response = requests.get(f"{SecurityConfig.BASE_URL}{endpoint}", timeout=5)

            # Should require authentication or not exist
            if response.status_code == 200:
                print(f"⚠️  Unprotected admin endpoint found: {endpoint}")
            else:
                assert response.status_code in [401, 403, 405, 404], (
                    f"Unexpected response for {endpoint}"
                )


class TestSecurityMisconfiguration(SecurityTestBase):
    """A06:2021 - Security Misconfiguration"""

    @pytest.mark.security
    def test_default_credentials(self):
        """Test for default/common credentials"""
        default_creds = [
            ("admin", "admin"),
            ("admin", "password"),
            ("admin", "admin123"),
            ("root", "root"),
            ("test", "test"),
        ]

        successful_logins = []
        for username, password in default_creds:
            response = requests.post(
                f"{SecurityConfig.BASE_URL}/api/admin/login",
                json={"username": username, "password": password},
                timeout=5,
            )

            if response.status_code == 200:
                successful_logins.append((username, password))

        if successful_logins:
            print(f"⚠️  Default credentials still work: {successful_logins}")

    @pytest.mark.security
    def test_directory_listing(self):
        """Test for directory listing"""
        directories = [
            "/static/",
            "/uploads/",
            "/backups/",
            "/logs/",
        ]

        for directory in directories:
            response = requests.get(f"{SecurityConfig.BASE_URL}{directory}", timeout=5)

            if response.status_code == 200:
                # Check for directory listing indicators
                content = response.text.lower()
                assert "index of" not in content, (
                    f"Directory listing enabled: {directory}"
                )

    @pytest.mark.security
    def test_security_headers(self):
        """Verify security headers are present"""
        response = requests.get(SecurityConfig.BASE_URL, timeout=5)

        required_headers = {
            "X-Content-Type-Options": "nosniff",
            "X-Frame-Options": ["DENY", "SAMEORIGIN"],
            "X-XSS-Protection": "1; mode=block",
            "Strict-Transport-Security": None,  # Should be present if HTTPS
        }

        for header, expected_value in required_headers.items():
            if expected_value is not None:
                actual_value = response.headers.get(header)
                if isinstance(expected_value, list):
                    if actual_value not in expected_value:
                        print(f"⚠️  Security header {header} not properly configured")
                else:
                    if actual_value != expected_value:
                        print(f"⚠️  Security header {header} not properly configured")

    @pytest.mark.security
    def test_verbose_error_messages(self):
        """Test for verbose error messages"""
        response = requests.get(f"{SecurityConfig.BASE_URL}/api/nonexistent", timeout=5)

        if response.status_code == 404:
            error_text = response.text.lower()
            # Should not reveal server details
            assert "python" not in error_text, "Python version exposed"
            assert "fastapi" not in error_text, "Framework exposed"
            assert "uvicorn" not in error_text, "Server exposed"


class TestXSS(SecurityTestBase):
    """A07:2021 - Cross-Site Scripting (XSS)"""

    @pytest.mark.security
    def test_reflected_xss(self):
        """Test reflected XSS vulnerability"""
        xss_payloads = [
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('XSS')>",
            "<svg onload=alert('XSS')>",
            "javascript:alert('XSS')",
            "<iframe src=javascript:alert('XSS')>",
        ]

        for payload in xss_payloads:
            response = requests.get(
                f"{SecurityConfig.BASE_URL}/api/search",
                params={"q": payload},
                timeout=5,
            )

            if response.status_code == 200:
                # Check if payload is escaped
                assert payload not in response.text, f"Reflected XSS: {payload}"

    @pytest.mark.security
    def test_stored_xss(self):
        """Test stored XSS vulnerability"""
        xss_payload = "<script>alert('Stored XSS')</script>"

        # Try to create device with XSS payload
        response = requests.post(
            f"{SecurityConfig.BASE_URL}/api/devices",
            json={"name": xss_payload, "ip_address": "10.0.0.1", "device_group_id": 1},
            timeout=5,
        )

        if response.status_code == 201:
            device_id = response.json().get("id")

            # Retrieve device
            get_response = requests.get(
                f"{SecurityConfig.BASE_URL}/api/devices/{device_id}", timeout=5
            )

            if get_response.status_code == 200:
                # XSS should be escaped
                assert "<script>" not in get_response.text, "Stored XSS vulnerability!"


class TestInsecureDeserialization(SecurityTestBase):
    """A08:2021 - Insecure Deserialization"""

    @pytest.mark.security
    def test_pickle_deserialization(self):
        """Test for unsafe pickle deserialization"""
        import pickle

        # Create malicious pickle payload
        class Exploit:
            def __reduce__(self):
                import os

                return (os.system, ("echo pwned",))

        malicious_payload = base64.b64encode(pickle.dumps(Exploit())).decode()

        response = requests.post(
            f"{SecurityConfig.BASE_URL}/api/import",
            data=malicious_payload,
            headers={"Content-Type": "application/x-pickle"},
            timeout=5,
        )

        # Should reject pickle data or endpoint not exist
        assert response.status_code in [400, 415, 404], (
            "Unsafe deserialization possible"
        )


class TestComponentsWithKnownVulnerabilities(SecurityTestBase):
    """A09:2021 - Using Components with Known Vulnerabilities"""

    @pytest.mark.security
    def test_server_version_disclosure(self):
        """Test if server version is disclosed"""
        response = requests.get(SecurityConfig.BASE_URL, timeout=5)

        server_header = response.headers.get("Server", "")

        # Should not reveal detailed version info (warning only)
        if any(ver in server_header for ver in ["uvicorn", "python"]):
            print(f"⚠️  Server version disclosed in header: {server_header}")

    @pytest.mark.security
    def test_dependency_versions_exposure(self):
        """Test for exposed dependency versions"""
        endpoints = [
            "/package.json",
            "/composer.json",
            "/requirements.txt",
            "/Pipfile",
            "/poetry.lock",
        ]

        for endpoint in endpoints:
            response = requests.get(f"{SecurityConfig.BASE_URL}{endpoint}", timeout=5)

            assert response.status_code == 404, f"Dependency file exposed: {endpoint}"


class TestLoggingMonitoringFailures(SecurityTestBase):
    """A10:2021 - Security Logging and Monitoring Failures"""

    @pytest.mark.security
    def test_failed_login_logging(self):
        """Verify failed logins are logged"""
        # Attempt failed login
        response = requests.post(
            f"{SecurityConfig.BASE_URL}/api/admin/login",
            json={"username": "admin", "password": "wrongpass"},
            timeout=5,
        )

        # Should be logged (check via audit endpoint if available)
        requests.get(f"{SecurityConfig.BASE_URL}/api/admin/audit", timeout=5)

        # Should get proper error response or endpoint not exist
        assert response.status_code in [401, 404]


# ============================================================================
# AAA-Specific Security Tests
# ============================================================================


class TestTACACSProtocolSecurity(SecurityTestBase):
    """TACACS+ protocol-specific security tests"""

    @pytest.mark.security
    def test_tacacs_packet_replay_attack(self):
        """Test for replay attack protection"""
        # Capture valid packet
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((SecurityConfig.TACACS_HOST, SecurityConfig.TACACS_PORT))

        # Send authentication packet
        packet = self._create_tacacs_auth_packet("testuser", "testpass")
        sock.send(packet)
        response1 = sock.recv(4096)
        sock.close()

        # Replay the same packet
        sock2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock2.connect((SecurityConfig.TACACS_HOST, SecurityConfig.TACACS_PORT))
        sock2.send(packet)
        response2 = sock2.recv(4096)
        sock2.close()

        # Should detect replay or use different session IDs
        # (or same response is acceptable)
        if response1 == response2 and len(response2) > 0:
            print("⚠️  Potential replay attack vulnerability detected")

    @pytest.mark.security
    def test_tacacs_session_hijacking(self):
        """Test for session hijacking protection"""
        # Try to use same session ID from different connections
        session_id = random.randint(1, 0xFFFFFFFF)

        # First connection
        sock1 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock1.connect((SecurityConfig.TACACS_HOST, SecurityConfig.TACACS_PORT))
        packet1 = self._create_tacacs_auth_packet("user1", "pass1", session_id)
        sock1.send(packet1)

        # Second connection with same session ID
        sock2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock2.connect((SecurityConfig.TACACS_HOST, SecurityConfig.TACACS_PORT))
        packet2 = self._create_tacacs_auth_packet("user2", "pass2", session_id)
        sock2.send(packet2)

        response2 = sock2.recv(4096)

        sock1.close()
        sock2.close()

        # Should reject duplicate session from different connection
        assert len(response2) > 0  # Should get error response

    @pytest.mark.security
    def test_tacacs_weak_encryption_key(self):
        """Test if weak TACACS+ keys are rejected"""
        weak_keys = ["", "123", "test", "a"]

        for key in weak_keys:
            # Attempt connection with weak key
            # (Would need to configure server to test properly)
            pass

    def _create_tacacs_auth_packet(
        self, username: str, password: str, session_id: int | None = None
    ) -> bytes:
        """Create TACACS+ authentication packet"""
        if session_id is None:
            session_id = random.randint(1, 0xFFFFFFFF)

        user_bytes = username.encode()
        pass_bytes = password.encode()

        # Simplified packet creation (see locust tests for full implementation)
        header = struct.pack(
            "!BBBBII",
            0xC0,  # version
            0x01,  # type (AUTHEN)
            0x01,  # seq_no
            0x00,  # flags
            session_id,
            len(user_bytes) + len(pass_bytes) + 8,
        )

        body = struct.pack(
            "!BBBBBBBB", 0x01, 0x01, 0x01, 0x01, len(user_bytes), len(pass_bytes), 0, 0
        )
        body += user_bytes + pass_bytes

        return header + body


class TestRADIUSProtocolSecurity(SecurityTestBase):
    """RADIUS protocol-specific security tests"""

    @pytest.mark.security
    def test_radius_shared_secret_brute_force(self):
        """Test RADIUS shared secret protection"""
        # Attempt authentication with different secrets
        for i in range(10):
            # Would need RADIUS packet implementation
            pass

    @pytest.mark.security
    def test_radius_message_authenticator(self):
        """Verify Message-Authenticator attribute is validated"""
        # Send RADIUS packet without proper Message-Authenticator
        pass


# ============================================================================
# Cryptographic Security Tests
# ============================================================================


class TestCryptographicSecurity(SecurityTestBase):
    """Test cryptographic implementations"""

    @pytest.mark.security
    def test_password_hashing_algorithm(self):
        """Verify strong password hashing"""
        requests.post(
            f"{SecurityConfig.BASE_URL}/api/users",
            json={
                "username": f"crypto_test_{random.randint(1000, 9999)}",
                "password": "TestPassword123!",
                "email": "crypto@example.com",
            },
            timeout=5,
        )

        # Password should be hashed with bcrypt/argon2/pbkdf2
        # (Check database directly in integration test)

    @pytest.mark.security
    def test_insecure_random_generation(self):
        """Test for insecure random number generation"""
        tokens = []

        for _ in range(10):
            response = requests.post(
                f"{SecurityConfig.BASE_URL}/api/users/reset-password",
                json={"email": "test@example.com"},
                timeout=5,
            )

            if response.status_code == 200:
                token = response.json().get("reset_token")
                if token:
                    tokens.append(token)

        # Tokens should be cryptographically random
        assert len(set(tokens)) == len(tokens), "Tokens not random"

    @pytest.mark.security
    def test_ssl_tls_configuration(self):
        """Test SSL/TLS configuration (if HTTPS)"""
        # Would test with https:// URL
        # Check for:
        # - Minimum TLS 1.2
        # - Strong cipher suites
        # - Valid certificate
        pass


# ============================================================================
# Business Logic Security Tests
# ============================================================================


class TestBusinessLogicSecurity(SecurityTestBase):
    """Test business logic vulnerabilities"""

    @pytest.mark.security
    def test_authorization_bypass_via_parameter_tampering(self):
        """Test parameter tampering to bypass authorization"""
        # Try to modify user ID in request
        response = requests.post(
            f"{SecurityConfig.BASE_URL}/api/users/1/promote",
            json={"user_id": 999},  # Trying to promote different user
            timeout=5,
        )

        # Should validate user ID matches authenticated user or endpoint not exist
        assert response.status_code in [401, 403, 400, 404]

    @pytest.mark.security
    def test_race_condition_in_authentication(self):
        """Test for race conditions in auth"""
        import concurrent.futures

        results = []

        def attempt_login():
            response = requests.post(
                f"{SecurityConfig.BASE_URL}/api/admin/login",
                json={
                    "username": SecurityConfig.TEST_USER,
                    "password": SecurityConfig.TEST_PASS,
                },
                timeout=5,
            )
            return response.status_code == 200

        # Simultaneous login attempts
        with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:
            futures = [executor.submit(attempt_login) for _ in range(10)]
            results = [f.result() for f in futures]

        # All should succeed or all should fail consistently
        assert len(set(results)) <= 1, "Race condition in authentication"

    @pytest.mark.security
    def test_privilege_level_manipulation(self):
        """Test privilege level tampering"""
        response = requests.post(
            f"{SecurityConfig.BASE_URL}/api/users",
            json={
                "username": f"priv_test_{random.randint(1000, 9999)}",
                "password": "TestPass123!",
                "privilege_level": 15,  # Trying to set high privilege
            },
            timeout=5,
        )

        if response.status_code == 201:
            user_data = response.json()
            # Should not allow setting privilege level directly
            assert user_data.get("privilege_level", 0) < 15, (
                "Privilege escalation possible"
            )


# ============================================================================
# Security Test Report Generator
# ============================================================================


class SecurityTestReport:
    """Generate comprehensive security test report"""

    def __init__(self):
        self.results = {
            "injection": [],
            "authentication": [],
            "data_exposure": [],
            "xxe": [],
            "access_control": [],
            "misconfiguration": [],
            "xss": [],
            "deserialization": [],
            "components": [],
            "logging": [],
            "tacacs_specific": [],
            "radius_specific": [],
            "cryptographic": [],
            "business_logic": [],
        }
        self.severity_scores = {"critical": 10, "high": 7, "medium": 4, "low": 1}

    def add_result(
        self, category: str, test_name: str, passed: bool, severity: str, details: str
    ):
        """Add test result"""
        self.results[category].append(
            {
                "test": test_name,
                "passed": passed,
                "severity": severity,
                "details": details,
            }
        )

    def calculate_security_score(self) -> float:
        """Calculate overall security score (0-100)"""
        total_tests = sum(len(tests) for tests in self.results.values())
        if total_tests == 0:
            return 0.0

        sum(len([t for t in tests if t["passed"]]) for tests in self.results.values())

        # Calculate weighted score
        total_severity = 0
        failed_severity = 0

        for category, tests in self.results.items():
            for test in tests:
                severity_score = self.severity_scores[test["severity"]]
                total_severity += severity_score
                if not test["passed"]:
                    failed_severity += severity_score

        if total_severity == 0:
            return 100.0

        score = ((total_severity - failed_severity) / total_severity) * 100
        return round(score, 2)

    def generate_report(self) -> str:
        """Generate formatted security report"""
        report = []
        report.append("=" * 70)
        report.append("SECURITY PENETRATION TEST REPORT")
        report.append("=" * 70)
        report.append("")

        score = self.calculate_security_score()
        report.append(f"Overall Security Score: {score}/100")
        report.append("")

        # OWASP Top 10 Summary
        report.append("OWASP Top 10 Coverage:")
        report.append("-" * 70)

        owasp_categories = {
            "A01:2021 - Injection": "injection",
            "A02:2021 - Broken Authentication": "authentication",
            "A03:2021 - Sensitive Data Exposure": "data_exposure",
            "A04:2021 - XXE": "xxe",
            "A05:2021 - Broken Access Control": "access_control",
            "A06:2021 - Security Misconfiguration": "misconfiguration",
            "A07:2021 - XSS": "xss",
            "A08:2021 - Insecure Deserialization": "deserialization",
            "A09:2021 - Components with Vulnerabilities": "components",
            "A10:2021 - Logging Failures": "logging",
        }

        for owasp_name, category in owasp_categories.items():
            tests = self.results[category]
            passed = len([t for t in tests if t["passed"]])
            total = len(tests)
            status = "✅ PASS" if passed == total else f"⚠️  {passed}/{total} passed"
            report.append(f"{owasp_name}: {status}")

        report.append("")
        report.append("Critical Findings:")
        report.append("-" * 70)

        # List critical/high severity failures
        critical_findings = []
        for category, tests in self.results.items():
            for test in tests:
                if not test["passed"] and test["severity"] in ["critical", "high"]:
                    critical_findings.append(test)

        if critical_findings:
            for finding in critical_findings:
                report.append(f"❌ [{finding['severity'].upper()}] {finding['test']}")
                report.append(f"   {finding['details']}")
                report.append("")
        else:
            report.append("✅ No critical findings detected")

        report.append("=" * 70)

        return "\n".join(report)


# ============================================================================
# Pytest Hooks
# ============================================================================


@pytest.fixture(scope="session")
def security_report():
    """Security test report fixture"""
    return SecurityTestReport()


def pytest_collection_finish(session):
    """Print security test info"""
    print("\n" + "=" * 70)
    print("🔒 TACACS+ Server Security Penetration Testing Suite")
    print("=" * 70)
    print("Testing OWASP Top 10 + AAA-specific vulnerabilities")
    print("")


if __name__ == "__main__":
    """Run security tests manually"""
    pytest.main([__file__, "-v", "--tb=short"])
